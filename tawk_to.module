<?php

/**
 * @file
 * @package   Tawk.to module for Drupal
 * @copyright (C) 2014- Tawk.to
 * @license   GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 */

/**
 * Returns help text which is dispalyed in modules page.
 *
 * @param string $path path
 * @param mixed  $arg  arguments
 * @return string
 */
function tawk_to_help($path, $arg) {
  switch ($path) {
    case "admin/help#tawk_to":
      return '<p>' . t("Tawk.to widget cutomization, using this module you can select widget which will be used on every page on your site") . '</p>';
  }
}

/**
 * Retrieves widget details from database.
 *
 * @return array Widget details
 */
function tawk_to_get_widget() {
  try {
    return db_query('SELECT page_id, widget_id FROM {tawk_to_widget} WHERE id = 1', array(), array(
      'fetch' => PDO::FETCH_ASSOC,
    ))->fetchAssoc();
  }
  catch(Exception $e) {
    watchdog('tawk_to', $e->getMessage());
    return NULL;
  }
}

/**
 * Hook for adding widget script to every page.
 *
 * @param  array $page Page
 * @return array Modified page
 */
function tawk_to_page_build(&$page) {
  $widget = tawk_to_get_widget();

  if (!$widget) {
    return NULL;
  }

  $page_id = $widget['page_id'];
  $widget_id = $widget['widget_id'];

  $widget_markup = include 'views/widget.php.inc';

  $page['page_bottom']['tawk_to_widget'] = array(
    '#markup' => $widget_markup,
  );

  return $page;
}

/**
 * Hooks up configuration menu items and paths for ajax call endpoints.
 *
 * @return array Menu
 */
function tawk_to_menu() {

  $items = array();

  $items['admin/config/tawk'] = array(
    'title'            => 'tawk.to',
    'description'      => 'tawk.to configuration',
    'position'         => 'left',
    'weight'           => -100,
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
  );

  $items['admin/config/tawk/widget'] = array(
    'title'            => 'Widget',
    'description'      => 'Included tawk.to widget configuration',
    'page callback'    => 'tawk_to_widget_customization',
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/tawk/setwidget'] = array(
    'title'            => 'Set widget',
    'page callback'    => 'tawk_to_set_widget',
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/config/tawk/removewidget'] = array(
    'title'            => 'Remove widget',
    'page callback'    => 'tawk_to_remove_widget',
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Displays widget configuration iframe.
 *
 * Configuration iframe contains functionality from
 * tawk.to server which is responsible for verifying
 * user login details and also retrieves his page
 * and widget list and comunicates back to upper
 * page so that changes can be saved in DB.
 *
 * @return string Configuration view markup
 */
function tawk_to_widget_customization() {
  $base_url = tawk_to_get_base_url();
  $iframe_url = tawk_to_get_iframe_url();
  return include 'views/admin.php.inc';
}

/**
 * Constructs url for configuration iframe.
 *
 * @return string Iframe url
 */
function tawk_to_get_iframe_url() {

  $widget = tawk_to_get_widget();

  if (!$widget) {
    $widget = array(
      'page_id'   => '',
      'widget_id' => '',
    );
  }

  return tawk_to_get_base_url() . '/generic/widgets?currentWidgetId=' . $widget['widget_id'] . '&currentPageId=' . $widget['page_id'];
}

/**
 * Base url for tawk.to application which serves iframe.
 *
 * @return string Base url
 */
function tawk_to_get_base_url() {
  return 'https://plugins.tawk.to';
}

/**
 * Ajax endpoint which is used to set selected widget details.
 */
function tawk_to_set_widget() {

  if (!isset($_POST['pageId']) || !isset($_POST['widgetId'])) {
    return drupal_json_output(['success' => FALSE]);
  }

  if (!tawk_to_get_widget()) {
    db_insert('tawk_to_widget')
    ->fields(array(
      'id'        => 1,
      'page_id'   => $_POST['pageId'],
      'widget_id' => $_POST['widgetId'],
    ))->execute();
  }
  else {
    db_update('tawk_to_widget')
      ->fields(array(
        'page_id'   => $_POST['pageId'],
        'widget_id' => $_POST['widgetId'],
      ))
      ->condition('id', 1, '=')
      ->execute();
  }

  drupal_json_output(['success' => TRUE]);
}

/**
 * Ajax endpoint which is used to remove currently selected widget details.
 */
function tawk_to_remove_widget($a = 0, $b = 0) {
  db_delete('tawk_to_widget')
    ->condition('id', 1)
    ->execute();

  drupal_json_output(['success' => TRUE]);
}
